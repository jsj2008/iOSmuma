//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct BRectImp<float> {
    Vec2Imp_bd4e6e3a _field1;
    Vec2Imp_bd4e6e3a _field2;
};

struct BasicMutex {
    CDUnknownFunctionPointerType *_field1;
    struct MutexInfo *_field2;
};

struct Battery {
    double _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
};

struct CLAccessoryObserverListener {
    void *info;
    CDUnknownFunctionPointerType onConnected;
    CDUnknownFunctionPointerType onDisconnected;
    CDUnknownFunctionPointerType onNmeaReceived;
    CDUnknownFunctionPointerType onReferenceTime;
    CDUnknownFunctionPointerType onReferenceLocation;
    CDUnknownFunctionPointerType onEphemerisURL;
};

struct CLActivityAlarmConcentrator {
    struct BasicMutex _field1;
    struct set<CMActivityAlarm *, CLActivityAlarmConcentrator::AlarmCompare, std::__1::allocator<CMActivityAlarm *>> _field2[9];
};

struct CLApplicationLifecycleManager {
    struct BasicMutex _field1;
    id _field2;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field3;
    struct list<CLApplicationLifecycleManager::PendingLaunch, std::__1::allocator<CLApplicationLifecycleManager::PendingLaunch>> _field4;
};

struct CLBatchedLocations;

struct CLCircularQueue<CLClientLocation> {
    struct vector<CLClientLocation, std::__1::allocator<CLClientLocation>> _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
};

struct CLCollectionRequester {
    CDUnknownFunctionPointerType *_field1;
    struct weak_ptr<CLCollectionRequester> _field2;
    id _field3;
    struct Listener {
        void *_field1;
        CDUnknownFunctionPointerType _field2;
        CDUnknownFunctionPointerType _field3;
        CDUnknownFunctionPointerType _field4;
    } _field4;
    id _field5;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field6;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field7;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field8;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field9;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field10;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field11;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field12;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field13;
    _Bool _field14;
    CDStruct_d20fda5e _field15;
    CDStruct_d20fda5e _field16;
    id _field17;
    id _field18;
    id _field19;
    id _field20;
    id _field21;
    id _field22;
    id _field23;
    id _field24;
    id _field25;
    id _field26;
    id _field27;
    id _field28;
    id _field29;
    struct __CFString *_field30;
    struct __CFString *_field31;
    id _field32;
    int _field33;
};

struct CLDistanceCalc {
    CDUnknownFunctionPointerType *_vptr$CLDistanceCalc;
    double fM;
    double fN;
    double fRefLatRads;
    double fRefLatDegs;
    double fCosRefLat;
};

struct CLEncryptedHarvestDatabase<CLAppHarvestDatabase, std::__1::basic_string<char>, void (*)(CLAppHarvestDatabase *, const std::__1::basic_string<char>&, const CLClientLocation &, const CLAppHarvestDatabase::HarvestData &, void *), CLAppHarvestDatabase::HarvestData>;

struct CLEncryptedHarvestDatabase<CLCdmaCellHarvestDatabase, CLTelephonyService_Type::CdmaCell, void (*)(CLCdmaCellHarvestDatabase *, const CLTelephonyService_Type::CdmaCell &, const CLClientLocation &, const CLCdmaCellHarvestDatabase::HarvestData &, void *), CLCdmaCellHarvestDatabase::HarvestData>;

struct CLEncryptedHarvestDatabase<CLCellHarvestDatabase, CLTelephonyService_Type::Cell, void (*)(CLCellHarvestDatabase *, const CLTelephonyService_Type::Cell &, const CLClientLocation &, const CLCellHarvestDatabase::HarvestData &, void *), CLCellHarvestDatabase::HarvestData>;

struct CLEncryptedHarvestDatabase<CLLteCellHarvestDatabase, CLTelephonyService_Type::LteCell, void (*)(CLLteCellHarvestDatabase *, const CLTelephonyService_Type::LteCell &, const CLClientLocation &, const CLLteCellHarvestDatabase::HarvestData &, void *), CLLteCellHarvestDatabase::HarvestData>;

struct CLEncryptedHarvestDatabase<CLPassHarvestDatabase, std::__1::basic_string<char>, void (*)(CLPassHarvestDatabase *, const CLClientLocation &, const CLPassHarvestDatabase::HarvestData &, void *), CLPassHarvestDatabase::HarvestData>;

struct CLEncryptedHarvestDatabase<CLScdmaCellHarvestDatabase, CLTelephonyService_Type::ScdmaCell, void (*)(CLScdmaCellHarvestDatabase *, const CLTelephonyService_Type::ScdmaCell &, const CLClientLocation &, const CLScdmaCellHarvestDatabase::HarvestData &, void *), CLScdmaCellHarvestDatabase::HarvestData>;

struct CLEncryptedHarvestDatabase<CLWifiHarvestDatabase, std::__1::basic_string<char>, void (*)(CLWifiHarvestDatabase *, const std::__1::basic_string<char>&, const CLClientLocation &, const CLWifiHarvestDatabase::HarvestData &, void *), CLWifiHarvestDatabase::HarvestData>;

struct CLFileDownloadHttp;

struct CLHostResolver {
    struct BasicMutex _field1;
    id _field2;
    int _field3;
    struct map<std::__1::basic_string<char>, std::__1::shared_ptr<CLHostEntry>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<CLHostEntry>>>> _field4;
    CDUnknownFunctionPointerType _field5;
    void *_field6;
};

struct CLLocationEncryptedHarvestDatabase;

struct CLLocationHarvester {
    struct BasicMutex _field1;
    id _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    int _field9;
    int _field10;
    int _field11;
    _Bool _field12;
    _Bool _field13;
    struct Battery _field14;
    int _field15;
    _Bool _field16;
    struct HarvestRules _field17;
    _Bool _field18;
    int _field19;
    int _field20;
    int _field21;
    int _field22;
    int _field23;
    int _field24;
    int _field25;
    int _field26;
    double _field27;
    double _field28;
    struct shared_ptr<CLCollectionRequester> _field29;
    struct CLLocationProvider *_field30;
    int _field31;
    double _field32;
    int _field33;
    struct CLServiceLocationProvider _field34;
    struct CLServiceLocationProvider _field35;
    int _field36;
    int _field37;
    CDStruct_d20fda5e _field38;
    CDStruct_d20fda5e _field39;
    CDStruct_d20fda5e _field40;
    CDStruct_d20fda5e _field41;
    CDStruct_d20fda5e _field42;
    CDStruct_d20fda5e _field43;
    _Bool _field44;
    _Bool _field45;
    struct HarvestData _field46;
    struct list<CLLocationHarvester::AppHarvestInfo, std::__1::allocator<CLLocationHarvester::AppHarvestInfo>> _field47;
    struct list<CLLocationHarvester::PassHarvestInfo, std::__1::allocator<CLLocationHarvester::PassHarvestInfo>> _field48;
    _Bool _field49;
    struct CLLocationEncryptedHarvestDatabase *_field50;
    struct CLEncryptedHarvestDatabase<CLCellHarvestDatabase, CLTelephonyService_Type::Cell, void (*)(CLCellHarvestDatabase *, const CLTelephonyService_Type::Cell &, const CLClientLocation &, const CLCellHarvestDatabase::HarvestData &, void *), CLCellHarvestDatabase::HarvestData> *_field51;
    struct CLEncryptedHarvestDatabase<CLScdmaCellHarvestDatabase, CLTelephonyService_Type::ScdmaCell, void (*)(CLScdmaCellHarvestDatabase *, const CLTelephonyService_Type::ScdmaCell &, const CLClientLocation &, const CLScdmaCellHarvestDatabase::HarvestData &, void *), CLScdmaCellHarvestDatabase::HarvestData> *_field52;
    struct CLEncryptedHarvestDatabase<CLCdmaCellHarvestDatabase, CLTelephonyService_Type::CdmaCell, void (*)(CLCdmaCellHarvestDatabase *, const CLTelephonyService_Type::CdmaCell &, const CLClientLocation &, const CLCdmaCellHarvestDatabase::HarvestData &, void *), CLCdmaCellHarvestDatabase::HarvestData> *_field53;
    struct CLEncryptedHarvestDatabase<CLLteCellHarvestDatabase, CLTelephonyService_Type::LteCell, void (*)(CLLteCellHarvestDatabase *, const CLTelephonyService_Type::LteCell &, const CLClientLocation &, const CLLteCellHarvestDatabase::HarvestData &, void *), CLLteCellHarvestDatabase::HarvestData> *_field54;
    struct CLEncryptedHarvestDatabase<CLWifiHarvestDatabase, std::__1::basic_string<char>, void (*)(CLWifiHarvestDatabase *, const std::__1::basic_string<char>&, const CLClientLocation &, const CLWifiHarvestDatabase::HarvestData &, void *), CLWifiHarvestDatabase::HarvestData> *_field55;
    struct CLEncryptedHarvestDatabase<CLAppHarvestDatabase, std::__1::basic_string<char>, void (*)(CLAppHarvestDatabase *, const std::__1::basic_string<char>&, const CLClientLocation &, const CLAppHarvestDatabase::HarvestData &, void *), CLAppHarvestDatabase::HarvestData> *_field56;
    struct CLEncryptedHarvestDatabase<CLPassHarvestDatabase, std::__1::basic_string<char>, void (*)(CLPassHarvestDatabase *, const CLClientLocation &, const CLPassHarvestDatabase::HarvestData &, void *), CLPassHarvestDatabase::HarvestData> *_field57;
    double _field58;
    double _field59;
    double _field60;
    double _field61;
    double _field62;
    double _field63;
    double _field64;
    double _field65;
    double _field66;
    double _field67;
    double _field68;
    double _field69;
    double _field70;
    double _field71;
    double _field72;
    double _field73;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field74;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field75;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field76;
    struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> _field77;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field78;
    struct unique_ptr<CLGpsController_Type::Client, std::__1::default_delete<CLGpsController_Type::Client>> _field79;
    struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> _field80;
    struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> _field81;
    struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> _field82;
    struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> _field83;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field84;
    struct unique_ptr<CLBTA_Type::Client, std::__1::default_delete<CLBTA_Type::Client>> _field85;
    struct unique_ptr<CLOperatorSettings_Type::Client, std::__1::default_delete<CLOperatorSettings_Type::Client>> _field86;
    struct CLPersistentTimer *_field87;
    struct CLPersistentTimer *_field88;
    struct __CFRunLoopTimer *_field89;
    struct __CFRunLoopTimer *_field90;
    struct __CFRunLoopTimer *_field91;
    int _field92;
    id _field93;
    id _field94;
    id _field95;
    _Bool _field96;
    _Bool _field97;
    _Bool _field98;
    _Bool _field99;
    int _field100;
    int _field101;
    struct CLCircularQueue<CLClientLocation> _field102;
    int _field103;
    int _field104;
    struct CLHostResolver _field105;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field106;
    unsigned int _field107;
    _Bool _field108;
    double _field109;
    struct CLPowerAssertion _field110;
    struct CLPowerAssertion _field111;
    struct CLPowerAssertion _field112;
    _Bool _field113;
    double _field114;
    _Bool _field115;
    _Bool _field116;
    _Bool _field117;
    _Bool _field118;
    _Bool _field119;
};

struct CLLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
};

struct CLNameValuePair {
    CDUnknownFunctionPointerType *_field1;
    struct __CFDictionary *_field2;
};

struct CLNetworkLocationRequesterALS {
    CDUnknownFunctionPointerType *_field1;
    struct vector<CLTelephonyService_Type::Cell, std::__1::allocator<CLTelephonyService_Type::Cell>> _field2;
    struct vector<CLTelephonyService_Type::ScdmaCell, std::__1::allocator<CLTelephonyService_Type::ScdmaCell>> _field3;
    struct vector<CLTelephonyService_Type::CdmaCell, std::__1::allocator<CLTelephonyService_Type::CdmaCell>> _field4;
    struct vector<CLTelephonyService_Type::LteCell, std::__1::allocator<CLTelephonyService_Type::LteCell>> _field5;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> _field6;
    struct Listener {
        void *_field1;
        id _field2;
        CDUnknownFunctionPointerType _field3;
        CDUnknownFunctionPointerType _field4;
        CDUnknownFunctionPointerType _field5;
        CDUnknownFunctionPointerType _field6;
        CDUnknownFunctionPointerType _field7;
        CDUnknownFunctionPointerType _field8;
        CDUnknownFunctionPointerType _field9;
        CDUnknownFunctionPointerType _field10;
        CDUnknownFunctionPointerType _field11;
        CDUnknownFunctionPointerType _field12;
        CDUnknownFunctionPointerType _field13;
        CDUnknownFunctionPointerType _field14;
        CDUnknownFunctionPointerType _field15;
        CDUnknownFunctionPointerType _field16;
        CDUnknownFunctionPointerType _field17;
        CDUnknownFunctionPointerType _field18;
    } _field7;
    int _field8;
    int _field9;
    id _field10;
    id _field11;
    _Bool _field12;
    int _field13;
    struct __CFString *_field14;
    struct __CFString *_field15;
    int _field16;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field17;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field18;
};

struct CLNotifierBase {
    CDUnknownFunctionPointerType *_field1;
};

struct CLNotifierClientBase {
    CDUnknownFunctionPointerType *_field1;
};

struct CLPersistentTimer {
    id _field1;
    CDUnknownFunctionPointerType _field2;
    void *_field3;
    id _field4;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field5;
};

struct CLPowerAssertion {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    void *_field3;
    struct __CFString *_field4;
    double _field5;
    double _field6;
};

struct CLQmiClientAdapter;

struct CLQmiDmsManager {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    int _field3;
    struct BasicMutex _field4;
    id _field5;
    struct shared_ptr<CLQmiClientAdapter> _field6;
    int _field7;
    unsigned int _field8;
    _Bool _field9;
};

struct CLServiceLocationProvider {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> _field6;
    struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    struct __CLClient *_field14;
    struct __CLClient *_field15;
    struct __CFString *_field16;
};

struct CLSimulationController {
    struct BasicMutex _field1;
    id _field2;
    struct list<CLClientLocation, std::__1::allocator<CLClientLocation>> _field3;
    _Bool _field4;
    double _field5;
    CDStruct_d20fda5e _field6;
    CDStruct_d20fda5e _field7;
    CDStruct_d20fda5e _field8;
    struct __CFRunLoopTimer *_field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    int _field15;
    int _field16;
    struct __CFURL *_field17;
};

struct CLStatusBarIconManager {
    struct BasicMutex _field1;
    id _field2;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field3;
    struct unique_ptr<CLGpsController_Type::Client, std::__1::default_delete<CLGpsController_Type::Client>> _field4;
    struct __CFRunLoopTimer *_field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8[5];
    int _field9;
    struct CLNameValuePair _field10;
    double _field11[5][3];
    _Bool _field12;
};

struct CLTileFileDownloadDetails {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    double _field4;
    int _field5;
    double _field6;
    _Bool _field7;
    _Bool _field8;
};

struct CLTilesManager {
    CDUnknownFunctionPointerType *_field1;
    struct BasicMutex _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    id _field4;
    id _field5;
    struct map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>>> _field6;
    struct map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> _field7;
    int _field8;
    _Bool _field9;
    struct map<TileId, CLTileFile *, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, CLTileFile *>>> _field10;
    struct DownloadState _field11;
    struct DownloadState _field12;
    double _field13;
    struct __CFRunLoopTimer *_field14;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field15;
    struct unique_ptr<CLBTA_Type::Client, std::__1::default_delete<CLBTA_Type::Client>> _field16;
    struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> _field17;
    _Bool _field18;
    _Bool _field19;
    double _field20;
    double _field21;
    double _field22;
    struct TileId _field23;
    _Bool _field24;
    _Bool _field25;
    double _field26;
    double _field27;
    struct CLPersistentTimer *_field28;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field29;
    CDStruct_d20fda5e _field30;
    double _field31;
    double _field32;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field33;
    int _field34;
    int _field35;
    int _field36;
    _Bool _field37;
    struct WifiServerResponseListener _field38;
};

struct CLTimeZoneDatabase;

struct CLTimeZoneManager {
    struct CLTimeZoneDatabase *_field1;
    struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> _field2;
    struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> _field3;
    struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> _field4;
    struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> _field5;
    struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> _field6;
    struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> _field7;
    id _field8;
    double _field9;
    double _field10;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field11;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field12;
    double _field13;
    CDStruct_d20fda5e _field14;
    CDStruct_d20fda5e _field15;
    CDStruct_d20fda5e _field16;
    struct CLServiceLocationProvider _field17;
    int _field18;
    int _field19;
    _Bool _field20;
    _Bool _field21;
    struct __CFRunLoopTimer *_field22;
    struct CLPersistentTimer *_field23;
    struct __CFRunLoopTimer *_field24;
    int _field25;
    double _field26;
    struct __CFRunLoopTimer *_field27;
    double _field28;
    double _field29;
    double _field30;
    int _field31;
    double _field32;
    double _field33;
    double _field34;
    double _field35;
    double _field36;
    double _field37;
    double _field38;
    double _field39;
    double _field40;
    _Bool _field41[22];
};

struct CdmaCell;

struct Cell;

struct Client;

struct DownloadState {
    char *_field1;
    _Bool _field2;
    double _field3;
    struct CLFileDownloadHttp *_field4;
};

struct FairPlayHWInfo_ {
    unsigned int IDLength;
    unsigned char ID[20];
};

struct HarvestData {
    double _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field7;
};

struct HarvestRule {
    double _field1;
    double _field2;
    double _field3;
    int _field4;
    int _field5;
};

struct HarvestRules {
    struct HarvestRule _field1;
    struct HarvestRule _field2;
    struct HarvestRule _field3;
    struct HarvestRule _field4;
    struct HarvestRule _field5;
    struct HarvestRule _field6;
    double _field7;
};

struct LteCell;

struct MutexInfo;

struct Name {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field3;
    _Bool _field4;
};

struct ScdmaCell;

struct TechnologyStatus {
    int _field1;
    _Bool _field2;
};

struct TileId {
    int _field1;
    int _field2;
    int _field3;
    unsigned long long _field4;
};

struct Vec2Imp<float> {
    float _field1;
    float _field2;
};

struct WifiServerResponseListener {
    CDUnknownFunctionPointerType *_field1;
    struct map<TileId, CLTilesManager::WifiServerResponseListenerData, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, CLTilesManager::WifiServerResponseListenerData>>> _field2;
};

struct _GEOTileKey {
    unsigned int :6;
    unsigned int :26;
    unsigned int :26;
    unsigned int :6;
    unsigned int :8;
    unsigned int :8;
    unsigned int :8;
    unsigned int :1;
    unsigned int :7;
    unsigned char _field1[4];
};

struct _NSRange {
    unsigned int _field1;
    unsigned int _field2;
};

struct __CFRunLoopTimer;

struct __CFString;

struct __CLClient;

struct __list_node<CLApplicationLifecycleManager::PendingLaunch, void *>;

struct __list_node<CLClientLocation, void *>;

struct __list_node<CLLocationHarvester::AppHarvestInfo, void *>;

struct __list_node<CLLocationHarvester::PassHarvestInfo, void *>;

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned int __cap_;
                    unsigned int __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[11];
                } __s;
                struct __raw {
                    unsigned long __words[3];
                } __r;
            } ;
        } __first_;
    } __r_;
};

struct list<CLApplicationLifecycleManager::PendingLaunch, std::__1::allocator<CLApplicationLifecycleManager::PendingLaunch>> {
    struct __list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *> {
        struct __list_node<CLApplicationLifecycleManager::PendingLaunch, void *> *_field1;
        struct __list_node<CLApplicationLifecycleManager::PendingLaunch, void *> *_field2;
    } _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLApplicationLifecycleManager::PendingLaunch, void *>>> {
        unsigned long _field1;
    } _field2;
};

struct list<CLClientLocation, std::__1::allocator<CLClientLocation>> {
    struct __list_node_base<CLClientLocation, void *> {
        struct __list_node<CLClientLocation, void *> *_field1;
        struct __list_node<CLClientLocation, void *> *_field2;
    } _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLClientLocation, void *>>> {
        unsigned long _field1;
    } _field2;
};

struct list<CLLocationHarvester::AppHarvestInfo, std::__1::allocator<CLLocationHarvester::AppHarvestInfo>> {
    struct __list_node_base<CLLocationHarvester::AppHarvestInfo, void *> {
        struct __list_node<CLLocationHarvester::AppHarvestInfo, void *> *_field1;
        struct __list_node<CLLocationHarvester::AppHarvestInfo, void *> *_field2;
    } _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLLocationHarvester::AppHarvestInfo, void *>>> {
        unsigned long _field1;
    } _field2;
};

struct list<CLLocationHarvester::PassHarvestInfo, std::__1::allocator<CLLocationHarvester::PassHarvestInfo>> {
    struct __list_node_base<CLLocationHarvester::PassHarvestInfo, void *> {
        struct __list_node<CLLocationHarvester::PassHarvestInfo, void *> *_field1;
        struct __list_node<CLLocationHarvester::PassHarvestInfo, void *> *_field2;
    } _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLLocationHarvester::PassHarvestInfo, void *>>> {
        unsigned long _field1;
    } _field2;
};

struct map<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, std::__1::allocator<std::__1::pair<SEL *const, CLIntersiloInterfaceSelectorInfo *>>> {
    struct __tree<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>>> {
        struct __tree_node<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true>> {
            unsigned long __first_;
        } __pair3_;
    } __tree_;
};

struct map<TileId, CLTileFile *, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, CLTileFile *>>> {
    struct __tree<std::__1::pair<TileId, CLTileFile *>, std::__1::__map_value_compare<TileId, CLTileFile *, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::pair<TileId, CLTileFile *>>> {
        struct __tree_node<std::__1::pair<TileId, CLTileFile *>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<TileId, CLTileFile *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, CLTileFile *, std::__1::less<TileId>, true>> {
            unsigned long _field1;
        } _field3;
    } _field1;
};

struct map<TileId, CLTilesManager::WifiServerResponseListenerData, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, CLTilesManager::WifiServerResponseListenerData>>> {
    struct __tree<std::__1::pair<TileId, CLTilesManager::WifiServerResponseListenerData>, std::__1::__map_value_compare<TileId, CLTilesManager::WifiServerResponseListenerData, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::pair<TileId, CLTilesManager::WifiServerResponseListenerData>>> {
        struct __tree_node<std::__1::pair<TileId, CLTilesManager::WifiServerResponseListenerData>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<TileId, CLTilesManager::WifiServerResponseListenerData>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, CLTilesManager::WifiServerResponseListenerData, std::__1::less<TileId>, true>> {
            unsigned long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> {
    struct __tree<std::__1::pair<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, true>, std::__1::allocator<std::__1::pair<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>>> {
        struct __tree_node<std::__1::pair<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, true>> {
            unsigned long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> {
    struct __tree<std::__1::pair<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, true>, std::__1::allocator<std::__1::pair<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>>> {
        struct __tree_node<std::__1::pair<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, true>> {
            unsigned long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
    struct __tree<std::__1::pair<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, true>, std::__1::allocator<std::__1::pair<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>>> {
        struct __tree_node<std::__1::pair<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, true>> {
            unsigned long _field1;
        } _field3;
    } _field1;
};

struct map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>>> {
    struct __tree<std::__1::pair<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, true>, std::__1::allocator<std::__1::pair<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>>> {
        struct __tree_node<std::__1::pair<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, true>> {
            unsigned long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, std::__1::shared_ptr<CLHostEntry>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<CLHostEntry>>>> {
    struct __tree<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<CLHostEntry>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::shared_ptr<CLHostEntry>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<CLHostEntry>>>> {
        struct __tree_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<CLHostEntry>>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<CLHostEntry>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::shared_ptr<CLHostEntry>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int>>> {
    struct __tree<std::__1::pair<unsigned long, int>, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::pair<unsigned long, int>>> {
        struct __tree_node<std::__1::pair<unsigned long, int>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned long, int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true>> {
            unsigned long __first_;
        } __pair3_;
    } __tree_;
};

struct set<CMActivityAlarm *, CLActivityAlarmConcentrator::AlarmCompare, std::__1::allocator<CMActivityAlarm *>> {
    struct __tree<CMActivityAlarm *, CLActivityAlarmConcentrator::AlarmCompare, std::__1::allocator<CMActivityAlarm *>> {
        struct __tree_node<CMActivityAlarm *, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CMActivityAlarm *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, CLActivityAlarmConcentrator::AlarmCompare> {
            unsigned long _field1;
        } _field3;
    } _field1;
};

struct shared_count {
    struct sp_counted_base *_field1;
};

struct shared_ptr<CLBatchedLocations> {
    struct CLBatchedLocations *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLCollectionRequester> {
    struct CLCollectionRequester *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<CLQmiClientAdapter> {
    struct CLQmiClientAdapter *_field1;
    struct shared_count _field2;
};

struct sp_counted_base;

struct unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client>> {
    struct __compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLBTA_Type::Client, std::__1::default_delete<CLBTA_Type::Client>> {
    struct __compressed_pair<CLBTA_Type::Client *, std::__1::default_delete<CLBTA_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client>> {
    struct __compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client>> {
        struct Client *__first_;
    } __ptr_;
};

struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client>> {
    struct __compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client>> {
    struct __compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client>> {
    struct __compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLGpsController_Type::Client, std::__1::default_delete<CLGpsController_Type::Client>> {
    struct __compressed_pair<CLGpsController_Type::Client *, std::__1::default_delete<CLGpsController_Type::Client>> {
        struct Client *__first_;
    } __ptr_;
};

struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client>> {
    struct __compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client>> {
        struct Client *__first_;
    } __ptr_;
};

struct unique_ptr<CLOperatorSettings_Type::Client, std::__1::default_delete<CLOperatorSettings_Type::Client>> {
    struct __compressed_pair<CLOperatorSettings_Type::Client *, std::__1::default_delete<CLOperatorSettings_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> {
    struct __compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client>> {
        struct Client *__first_;
    } __ptr_;
};

struct unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client>> {
    struct __compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client>> {
    struct __compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client>> {
        struct Client *_field1;
    } _field1;
};

struct vector<CLClientLocation, std::__1::allocator<CLClientLocation>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<CLClientLocation *, std::__1::allocator<CLClientLocation>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<CLTelephonyService_Type::CdmaCell, std::__1::allocator<CLTelephonyService_Type::CdmaCell>> {
    struct CdmaCell *_field1;
    struct CdmaCell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::CdmaCell *, std::__1::allocator<CLTelephonyService_Type::CdmaCell>> {
        struct CdmaCell *_field1;
    } _field3;
};

struct vector<CLTelephonyService_Type::Cell, std::__1::allocator<CLTelephonyService_Type::Cell>> {
    struct Cell *_field1;
    struct Cell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::Cell *, std::__1::allocator<CLTelephonyService_Type::Cell>> {
        struct Cell *_field1;
    } _field3;
};

struct vector<CLTelephonyService_Type::LteCell, std::__1::allocator<CLTelephonyService_Type::LteCell>> {
    struct LteCell *_field1;
    struct LteCell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::LteCell *, std::__1::allocator<CLTelephonyService_Type::LteCell>> {
        struct LteCell *_field1;
    } _field3;
};

struct vector<CLTelephonyService_Type::ScdmaCell, std::__1::allocator<CLTelephonyService_Type::ScdmaCell>> {
    struct ScdmaCell *_field1;
    struct ScdmaCell *_field2;
    struct __compressed_pair<CLTelephonyService_Type::ScdmaCell *, std::__1::allocator<CLTelephonyService_Type::ScdmaCell>> {
        struct ScdmaCell *_field1;
    } _field3;
};

struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field2;
    struct __compressed_pair<std::__1::basic_string<char>*, std::__1::allocator<std::__1::basic_string<char>>> {
        struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field1;
    } _field3;
};

struct weak_ptr<CLCollectionRequester> {
    struct CLCollectionRequester *_field1;
    struct __shared_weak_count *_field2;
};

#if 0
// Names with conflicting types:
typedef struct {
    CDStruct_d20fda5e _field1;
    struct {
        double _field1;
        double _field2;
        float _field3;
        float _field4;
        float _field5;
        _Bool _field6;
    } _field2;
    struct shared_ptr<CLBatchedLocations> _field3;
    struct TechnologyStatus _field4;
    _Bool _field5;
    double _field6;
    int _field7;
    CDStruct_c3b9c2ee _field8;
    CDStruct_c3b9c2ee _field9;
} NotificationData_522b5f94;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct CDStruct_183601bc;

typedef struct {
    int _field1;
    CDStruct_c3b9c2ee _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    int _field11;
    double _field12;
    int _field13;
    CDStruct_c3b9c2ee _field14;
    double _field15;
} CDStruct_d20fda5e;

typedef struct {
    CDStruct_c3b9c2ee _field1;
    double _field2;
} CDStruct_88bbbd05;

typedef struct {
    struct {
        id _field1;
        char *_field2;
        unsigned int _field3;
        unsigned int _field4;
        unsigned int _field5;
        unsigned int _field6;
        unsigned int _field7;
        unsigned long long _field8;
        char _field9;
        unsigned long long _field10;
        float _field11;
        id _field12;
        int _field13;
    } _field1;
    unsigned int _field2;
    unsigned int _field3;
    int _field4;
    int _field5;
    int _field6;
    unsigned int _field7;
    unsigned int _field8;
    struct BRectImp<float> _field9;
    CDStruct_183601bc *_field10;
    struct {
        unsigned short _field1[2];
        unsigned short _field2[2];
    } _field11;
    unsigned char _field12;
} CDStruct_5d598994;

// Ambiguous groups
typedef struct {
    unsigned int arfcn:1;
    unsigned int ecn0:1;
    unsigned int psc:1;
    unsigned int rat:1;
    unsigned int rscp:1;
    unsigned int serverHash:1;
    unsigned int transmit:1;
} CDStruct_3769fefd;

typedef struct {
    unsigned int arfcn:1;
    unsigned int psc:1;
} CDStruct_6bbaae90;

typedef struct Vec2Imp<float> {
    float _field1;
    float _field2;
} Vec2Imp_bd4e6e3a;

